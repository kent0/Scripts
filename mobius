#!/usr/bin/perl

use v5.10;

sub organize { # prepares for the next run and sets up restart file
    `echo \$(date -R) 'organizing...' >> mob.log`;
    `cp -r base $next &>> mob.log`;
    system "mvn $next/{base,$run_name" . '} &>> mob.log';
#   `ln -s $(pwd -P)/$last/$restart $(pwd -P)/$next/restart_0.f00001`;
    `cp $last/$restart $next/restart_0.f00001`;
}

sub compile { # compile using makenek
    `echo \$(date -R) 'compiling...' >> mob.log`;
    `cd $next; ./mn $run_name &>> ../mob.log`;
    if (`find $next/nek5000 2> /dev/null` eq '') {
        `echo \$(date -R) 'error: compilation failed...' >> mob.log`;
        `cat $next/compiler.out | mail -s 'Error on $machine: $name $next Compilation Failed...' $email`;
        `echo \$(date -R) 'ending program...'`;
        exit 1;
    }
}

sub msend { `cat $mbody | mail -s '$msubject' $email`; }

sub run { # submit the job according to mob.cmd
    `echo \$(date -R) 'starting run...' >> mob.log`;
    $status=`cd $next; ./mob.cmd $run_name &>> ../mob.log; echo $?`;
    if (status == 1) { exit 1; }
}

sub update_last_next { # update last and next variable
    $last_last=$last;
    chomp($last = `ls | grep '[0-9][0-9][0-9][0-9][0-9]' | tail -1`);
    exit if ($last eq '99999');
    $next = sprintf("%05d", $last + 1);
    if ($last_last ne $last) {
        `echo 'last = $last' >> mob.log`;
        `echo 'next = $next' >> mob.log`;
    };
}

sub update_name { # update name variable
    chomp($name = `cat mob.name 2> /dev/null`);

    if ($name eq '') {
        chomp($name = `basename \$(pwd)`);
        `echo $name > mob.name`;
    }
    `echo 'name = $name' >> mob.log`;
}

sub update_restart { # update restart variable
    $out_format = $name . '_' . $last . '_' . '*0.f*';
    if ($timeout) {
        chomp($restart = `cd $last; find $out_format | tail -2 | head -1`);
    } else {
        chomp($restart = `cd $last; find $out_format | tail -1`);
    }
    if ($restart eq '') { exit 1; }
    `echo 'restart = $restart' >> mob.log`;
}

`mv mob.log mob.log2 2> /dev/null`;
`echo \$(date -R) 'starting mobius...' >> mob.log`;
`echo 'removing mob.info...' >> mob.log`;
`rm mob.info 2> /dev/null`;

$config=do("mob.config");
die "Error reading config file: $!" unless defined $config;

$machine=$config->{machine};
$email=$config->{email};
$base=$config->{base};

`echo 'email = $email' >> mob.log`;
`echo 'base = $base' >> mob.log`;

update_name();

`echo \$(date -R) 'starting loop...' >> mob.log`;

for (;;) { # infinite loop
    chomp($info = `cat mob.info 2> /dev/null`);

    if ($info eq '1') {
        `echo 'mob.info == 1, exiting...' >> mob.log`;
        last;
    }

    update_last_next();
    $run_name = $name . '_' . $next . '_';

    $log = `cat $last/*cobaltlog 2> /dev/null`;
    $timeout = $log =~ /maximum execution time exceeded/;
    $cleanrun = $log =~ /task completed normally/;

    if ($timeout) {
        `echo 'Run Timed out...' >> mob.log`;
        $msubject = "$name $last Run Exceeded Walltime";
        $mbody = 'mbody.txt';
#       `echo '' > $mbody`;
#       `echo '*****Cobaltlog*****' >> $mbody`;
#       `cat *cobaltlog >> $mbody`;
#       `echo '' >> $mbody`;
        `echo '*****Logfile*****' >> $mbody`;
        `cat logfile >> $mbody`;
        msend();
        `rm mbody.txt`;
        last;
    }

    if ($cleanrun) {
        `echo \$(date -R) 'post-processing...' >> mob.log`;
        `cd $last; ../mob.post &>> ../mob.log`;
        `echo \$(date -R) 'proceeding to $next...' >> mob.log`;
        update_restart();
        organize();
        compile();
        run();
    }

    sleep(10);
}
